name: CI

on:
  - push

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fmt:
    name: Source formatting check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        uses: actions-rs/cargo@v1.0.3
        with:
          command: fmt
          args: -- --check

  test:
    name: Lint, test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Restore cargo cache
        uses: actions/cache@v3
        env:
          cache-name: ci
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Run lints
        uses: actions-rs/cargo@v1.0.3
        with:
          command: clippy
          args: --workspace --tests --release -- --deny warnings

      # setup testdata
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'
          cache-dependency-path: 'testdata/**/package-lock.json'

      - name: Pull native test runners
        run: |
          eval `ssh-agent -s`

          echo "${{secrets.SSH_KEY_ABQ_JEST}}" | ssh-add -
          git submodule update --init -- native-runners/abq-jest

          eval `ssh-agent -k`

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
        shell: bash
        working-directory: native-runners/abq-jest
      - name: Restore yarn cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-cache-folder-${{ hashFiles('native-runners/abq-jest/yarn.lock', '.yarnrc.yml') }}
          restore-keys: |
            yarn-cache-folder-

      - name: Load test dependencies
        run: |
          scripts/init_testdata

      # End setup testdata

      - name: Dogfood abq
        timeout-minutes: 3
        run: |
          make dogfood
        env:
          CI: false

      - name: Upload artifacts to captain
        uses: rwx-research/upload-captain-artifact@v1
        with:
          artifacts: |
            [
              {
                "name": "test",
                "path": "abq-test-results.xml",
                "kind": "test_results",
                "parser": "junit_xml"
              }
            ]
          job-name: 'Lint, test'
          job-matrix: '${{ toJSON(matrix) }}'
          captain-token: '${{ secrets.VANGUARD_PRODUCTION_RWX_TOKEN }}'

      - name: Run tests with cargo
        timeout-minutes: 2
        if: github.run_attempt == 1
        run: |
          cargo test --all-features
        env:
          CI: false

      - name: Run retried tests with cargo, including debug output
        timeout-minutes: 2
        if: github.run_attempt > 1
        run: |
          export ABQ_DEBUG_CLI_TESTS_FOR_CI=1
          cargo test --all-features -- --nocapture
        env:
          CI: false

  deploy-main:
    name: Deploy abq
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: test
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy abq
        run: flyctl deploy --remote-only

  nightly-release:
    name: Release nightlies
    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            platform: linux_x86-64
            container: quay.io/pypa/manylinux2014_x86_64
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    if: github.ref == 'refs/heads/main'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Restore cargo cache
        uses: actions/cache@v3.0.11
        env:
          cache-name: ci
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-
      - name: Install Rust toolchain
        uses: rwx-research/rust-toolchain@abq
        with:
          toolchain: stable

      - name: Install system deps
        run: |
          yum install openssl-devel sudo jq -y

      - name: Build release
        run: cargo build --release

      - name: Cut GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: ABQ Nightly
          tag_name: init
          prerelease: true
          body: ''
          fail_on_unmatched_files: true
          files: |
            target/release/abq
            target/release/abq_cargo
            target/release/abq_worker_harness

      - name: Install aws CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Set up aws production profile
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_S3_ABQ_RELEASES_PRODUCTION_ACCESS_KEY_ID }} --profile production
          aws configure set aws_secret_access_key ${{ secrets.AWS_S3_ABQ_RELEASES_PRODUCTION_SECRET_ACCESS_KEY }} --profile production

      - name: Cut nightly to S3
        env:
          AWS_DEFAULT_REGION: us-east-2
          AWS_DEFAULT_OUTPUT: json
        run: |
          RELEASE_NAME="abq_nightly_${{ matrix.platform }}"
          RELEASE_TARBALL="$RELEASE_NAME.tar.gz"

          RELEASE_BUCKET="abq-releases"
          RELEASE_OBJECT="abq/nightly/$RELEASE_TARBALL"

          mkdir "$RELEASE_NAME"
          cp target/release/abq "$RELEASE_NAME"
          tar -czvf "$RELEASE_TARBALL" "$RELEASE_NAME"
          aws s3 cp "$RELEASE_TARBALL" "s3://$RELEASE_BUCKET/$RELEASE_OBJECT" --profile production
          aws s3api put-object-tagging \
            --bucket "$RELEASE_BUCKET" \
            --key "$RELEASE_OBJECT" \
            --tagging "$(jq -n --arg commit "$(git rev-parse HEAD)" '{"TagSet": [{"Key":"commit", "Value": $commit}]}')" \
            --profile production
