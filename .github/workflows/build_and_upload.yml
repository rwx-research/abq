name: Build and Upload

on:
  # for manual release on the v1 release channel
  workflow_dispatch:
    inputs:
      ref:
        description: 'ref to build'
        required: true
        type: string
      release_channel:
        description: 'release channel'
        required: true
        type: choice
        options:
        - "v1"
        - "unstable"

  # for automatic release from main on the unstable release channel
  workflow_call:
    inputs:
      ref:
        description: 'ref to build'
        required: true
        type: string
      release_channel:
        description: 'release channel'
        required: true
        type: string
    secrets:
      RWX_STAGING_CREATE_RELEASE_ACCESS_TOKEN:
        required: true
      RWX_PRODUCTION_CREATE_RELEASE_ACCESS_TOKEN:
        required: true
      AWS_S3_ABQ_RELEASES_DEVELOPMENT_ACCESS_KEY_ID:
        required: true
      AWS_S3_ABQ_RELEASES_DEVELOPMENT_SECRET_ACCESS_KEY:
        required: true
      AWS_S3_ABQ_RELEASES_STAGING_ACCESS_KEY_ID:
        required: true
      AWS_S3_ABQ_RELEASES_STAGING_SECRET_ACCESS_KEY:
        required: true
      AWS_S3_ABQ_RELEASES_PRODUCTION_ACCESS_KEY_ID:
        required: true
      AWS_S3_ABQ_RELEASES_PRODUCTION_SECRET_ACCESS_KEY:
        required: true

jobs:
  release:
    name: Build, Upload, Release ABQ
    strategy:
      # in the future we'll want to release against different architectures
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            platform: linux_x86-64
            container: quay.io/pypa/manylinux2014_x86_64
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    outputs:
      abq_version: ${{ steps.abq_version.outputs.abq_version }}
    env:
      AWS_DEFAULT_REGION: us-east-2
      AWS_DEFAULT_OUTPUT: json
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # get whole history for versioning

      - name: Mark safe directory
        run: |
          # For some reason we need this, even though actions/checkout sets
          # safe.directory by default?
          # Perhaps it is because we work in a container?
          git config --global --add safe.directory "$PWD"
          git describe

      # this may not be unecessary when https://github.com/actions/checkout/issues/882 is resolved
      - name: re-fetch overwritten tag
        run: git fetch --tags --force

      - name: Restore cargo cache
        uses: actions/cache@v3.0.11
        env:
          cache-name: ci
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-release-${{ hashFiles('rust-toolchain.toml')}}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-release-${{ hashFiles('rust-toolchain.toml')}}-
      - name: Install Rust toolchain
        uses: rwx-research/rust-toolchain@abq
        with:
          toolchain: stable

      - name: Install build + deploy deps
        run: |
          yum install sudo jq -y

      - name: Build release
        run: cargo build --release --all-features

      - name: Install aws CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Prepare release environment
        run: |
          ABQ_VERSION="$(cat build_artifact/abq_version.txt)"
          RELEASE_NAME="abq_${ABQ_VERSION}_${{ matrix.platform }}"
          RELEASE_ARCHIVE="${RELEASE_NAME}.tar.gz"
          RELEASE_S3_OBJECT="abq/${ABQ_VERSION}/${RELEASE_ARCHIVE}"
          {
          echo "ABQ_VERSION=$ABQ_VERSION"
          echo "RELEASE_NAME=$RELEASE_NAME"
          echo "RELEASE_ARCHIVE=$RELEASE_ARCHIVE"
          echo "RELEASE_S3_OBJECT=$RELEASE_S3_OBJECT"
          } >> "$GITHUB_ENV"

      - name: Prepare release
        run: |
          mkdir "${RELEASE_NAME}"
          cp target/release/abq "${RELEASE_NAME}"
          tar -czvf "${RELEASE_ARCHIVE}" "${RELEASE_NAME}"

      - name: Push release to development S3
        env:
          RELEASE_BUCKET: abq-releases-development
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_S3_ABQ_RELEASES_DEVELOPMENT_ACCESS_KEY_ID }} --profile development
          aws configure set aws_secret_access_key ${{ secrets.AWS_S3_ABQ_RELEASES_DEVELOPMENT_SECRET_ACCESS_KEY }} --profile development

          aws s3 cp "$RELEASE_ARCHIVE" "s3://$RELEASE_BUCKET/$RELEASE_S3_OBJECT" --profile development
          aws s3api put-object-tagging \
            --bucket "$RELEASE_BUCKET" \
            --key "$RELEASE_S3_OBJECT" \
            --tagging "$(jq -n --arg commit "$(git rev-parse HEAD)" '{"TagSet": [{"Key":"commit", "Value": $commit}]}')" \
            --profile development

          aws s3 cp \
            "s3://$RELEASE_BUCKET/$RELEASE_S3_OBJECT" \
            "s3://$RELEASE_BUCKET/${RELEASE_S3_OBJECT//$ABQ_VERSION/nightly}" \
            --profile development

      - name: Push release to staging S3
        env:
          RELEASE_BUCKET: abq-releases-staging
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_S3_ABQ_RELEASES_STAGING_ACCESS_KEY_ID }} --profile staging
          aws configure set aws_secret_access_key ${{ secrets.AWS_S3_ABQ_RELEASES_STAGING_SECRET_ACCESS_KEY }} --profile staging

          aws s3 cp "$RELEASE_ARCHIVE" "s3://$RELEASE_BUCKET/$RELEASE_S3_OBJECT" --profile staging
          aws s3api put-object-tagging \
            --bucket "$RELEASE_BUCKET" \
            --key "$RELEASE_S3_OBJECT" \
            --tagging "$(jq -n --arg commit "$(git rev-parse HEAD)" '{"TagSet": [{"Key":"commit", "Value": $commit}]}')" \
            --profile staging

          aws s3 cp \
            "s3://$RELEASE_BUCKET/$RELEASE_S3_OBJECT" \
            "s3://$RELEASE_BUCKET/${RELEASE_S3_OBJECT//$ABQ_VERSION/nightly}" \
            --profile staging
      - name: Push release to production S3
        env:
          RELEASE_BUCKET: abq-releases
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_S3_ABQ_RELEASES_PRODUCTION_ACCESS_KEY_ID }} --profile production
          aws configure set aws_secret_access_key ${{ secrets.AWS_S3_ABQ_RELEASES_PRODUCTION_SECRET_ACCESS_KEY }} --profile production

          aws s3 cp "$RELEASE_ARCHIVE" "s3://$RELEASE_BUCKET/$RELEASE_S3_OBJECT" --profile production
          aws s3api put-object-tagging \
            --bucket "$RELEASE_BUCKET" \
            --key "$RELEASE_S3_OBJECT" \
            --tagging "$(jq -n --arg commit "$(git rev-parse HEAD)" '{"TagSet": [{"Key":"commit", "Value": $commit}]}')" \
            --profile production

          aws s3 cp \
            "s3://$RELEASE_BUCKET/$RELEASE_S3_OBJECT" \
            "s3://$RELEASE_BUCKET/${RELEASE_S3_OBJECT//$ABQ_VERSION/nightly}" \
            --profile production
      - name: export abq version
        id: abq_version
        run: |
          echo "abq_version=$ABQ_VERSION" >> "$GITHUB_OUTPUT"

  notify-staging-api:
    name: Release new abq to staging API
    needs: release
    uses: ./.github/workflows/release_staging.yml
    with:
      version: ${{ needs.release.outputs.abq_version }}
      release_channel: ${{inputs.release_channel}}
    secrets:
      RWX_STAGING_CREATE_RELEASE_ACCESS_TOKEN: ${{ secrets.RWX_STAGING_CREATE_RELEASE_ACCESS_TOKEN }}

  notify-production-api:
    name: Release new abq to production API
    needs: release
    uses: ./.github/workflows/release_production.yml
    with:
      version: ${{ needs.release.outputs.abq_version }}
      release_channel: ${{inputs.release_channel}}
    secrets:
      RWX_PRODUCTION_CREATE_RELEASE_ACCESS_TOKEN: ${{ secrets.RWX_PRODUCTION_CREATE_RELEASE_ACCESS_TOKEN }}
