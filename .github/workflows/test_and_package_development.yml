name: Test and package development builds

on:
  workflow_call:
    inputs:
      ref:
        description: 'ref to build'
        required: true
        type: string
    outputs:
      abq_version:
        description: "Released ABQ version"
        value: ${{ jobs.release.outputs.abq_version }}
    secrets:
      SSH_KEY_ABQ_JEST:
        required: true
      RWX_STAGING_CREATE_RELEASE_ACCESS_TOKEN:
        required: true
      AWS_S3_ABQ_RELEASES_STAGING_ACCESS_KEY_ID:
        required: true
      AWS_S3_ABQ_RELEASES_STAGING_SECRET_ACCESS_KEY:
        required: true

jobs:
  release:
    name: Build, Upload, Release ABQ
    # We only need x86-64 statically-linked binaries for development testing.
    runs-on: ubuntu-latest
    outputs:
      abq_version: ${{ steps.abq_version.outputs.abq_version }}
    env:
      AWS_DEFAULT_REGION: us-east-2
      AWS_DEFAULT_OUTPUT: json
      PLATFORM: linux_x86-64
      RUST_TARGET: x86_64-unknown-linux-musl
      ABQ_DEVELOPMENT_BUILD: 1
      ABQ_NO_REBUILD: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # get whole history for versioning

      - name: Mark safe directory
        run: |
          # For some reason we need this, even though actions/checkout sets
          # safe.directory by default?
          # Perhaps it is because we work in a container?
          git config --global --add safe.directory "$PWD"
          git describe

      # this may not be unecessary when https://github.com/actions/checkout/issues/882 is resolved
      - name: re-fetch overwritten tag
        run: git fetch --tags --force

      - name: Install musl libc tools
        run: |
          sudo apt-get install -y musl-tools

      - name: Restore cargo cache
        uses: actions/cache@v3.0.11
        env:
          cache-name: ci
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: cargo-release-linux_x86-64-musl-${{ hashFiles('rust-toolchain.toml')}}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            cargo-release-linux_x86-64-musl-${{ hashFiles('rust-toolchain.toml')}}-
      - name: Install Rust toolchain
        uses: rwx-research/rust-toolchain@abq
        with:
          toolchain: 1.65.0
          target: ${{ env.RUST_TARGET }}
          default: true
          components: clippy

      - name: Run lints
        uses: actions-rs/cargo@v1.0.3
        with:
          command: clippy
          args: --workspace --tests --release --all-features --target=${{ env.RUST_TARGET }} -- --deny warnings

      - name: Lint github workflows
        run: |
          echo "::add-matcher::.github/actionlint-matcher.json"
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
          ./actionlint -color
        shell: bash

      # setup testdata
      - uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'npm'
          cache-dependency-path: 'testdata/**/package-lock.json'

      - name: Install Yarn
        run: npm install -g yarn

      - name: Pull native test runners
        run: |
          set -x

          eval "$(ssh-agent -s)"

          echo "${{secrets.SSH_KEY_ABQ_JEST}}" | ssh-add -
          git submodule update --init -- native-runners/abq-jest

          eval "$(ssh-agent -k)"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> "$GITHUB_OUTPUT"
        shell: bash
        working-directory: native-runners/abq-jest

      - name: Restore yarn cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-cache-folder-${{ hashFiles('native-runners/abq-jest/yarn.lock', '.yarnrc.yml') }}
          restore-keys: |
            yarn-cache-folder-

      - name: Load test dependencies
        run: |
          scripts/init_testdata

      # End setup testdata

      - name: Build release with tests
        run: |
          cargo build --tests --release --all-features --target="$RUST_TARGET"

      - name: Run tests with cargo
        timeout-minutes: 4
        if: github.run_attempt == 1
        run: |
          cargo test --release --all-features --target="$RUST_TARGET"
        env:
          CI: false

      - name: Run retried tests with cargo, including debug output
        timeout-minutes: 5
        if: github.run_attempt > 1
        run: |
          export ABQ_DEBUG_CLI_TESTS_FOR_CI=1
          cargo test --release --all-features --target="$RUST_TARGET" -- --nocapture
        env:
          CI: false

      - name: Prepare release environment
        run: |
          ABQ_VERSION="$(cat build_artifact/abq_version.txt)"
          RELEASE_NAME="abq_${ABQ_VERSION}_linux_x86-64"
          RELEASE_ARCHIVE="${RELEASE_NAME}.tar.gz"
          RELEASE_S3_OBJECT="abq/${ABQ_VERSION}/${RELEASE_ARCHIVE}"
          {
            echo "ABQ_VERSION=$ABQ_VERSION"
            echo "RELEASE_NAME=$RELEASE_NAME"
            echo "RELEASE_ARCHIVE=$RELEASE_ARCHIVE"
            echo "RELEASE_S3_OBJECT=$RELEASE_S3_OBJECT"
          } >> "$GITHUB_ENV"

      - name: Prepare release
        run: |
          mkdir "${RELEASE_NAME}"
          cp "target/$RUST_TARGET/release/abq" "${RELEASE_NAME}"
          tar -czvf "${RELEASE_ARCHIVE}" "${RELEASE_NAME}"

      - name: Push release to staging S3
        env:
          RELEASE_BUCKET: abq-releases-staging
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_S3_ABQ_RELEASES_STAGING_ACCESS_KEY_ID }} --profile staging
          aws configure set aws_secret_access_key ${{ secrets.AWS_S3_ABQ_RELEASES_STAGING_SECRET_ACCESS_KEY }} --profile staging

          aws s3 cp "$RELEASE_ARCHIVE" "s3://$RELEASE_BUCKET/$RELEASE_S3_OBJECT" --profile staging
          aws s3api put-object-tagging \
            --bucket "$RELEASE_BUCKET" \
            --key "$RELEASE_S3_OBJECT" \
            --tagging "$(jq -n --arg commit "$(git rev-parse HEAD)" '{"TagSet": [{"Key":"commit", "Value": $commit}]}')" \
            --profile staging

          aws s3 cp \
            "s3://$RELEASE_BUCKET/$RELEASE_S3_OBJECT" \
            "s3://$RELEASE_BUCKET/${RELEASE_S3_OBJECT//$ABQ_VERSION/nightly}" \
            --profile staging

      - name: export abq version
        id: abq_version
        run: |
          echo "abq_version=${ABQ_VERSION}" >> "$GITHUB_OUTPUT"

  notify-api:
    name: Release new abq to staging API
    needs: release
    uses: ./.github/workflows/release_staging.yml
    with:
      version: ${{ needs.release.outputs.abq_version }}
    secrets:
      RWX_STAGING_CREATE_RELEASE_ACCESS_TOKEN: ${{ secrets.RWX_STAGING_CREATE_RELEASE_ACCESS_TOKEN }}
